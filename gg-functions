#!/bin/bash

genDebugLog(){
	git --version > gg-debug.txt
	git status >> gg-debug.txt
	git branch >> gg-debug.txt
}

get_currentBranch(){
    #currentBranch=`git status | grep On\ branch | awk '{print $3 }'`
	currentBranch=`git status | grep On\ branch | sed 's#On\ branch\ \(.*\)$#\1#'`
	if [ -z $currentBranch ]; then
		printf "Can not detect the current branch, please open a issue on github.com/famjor/gg and paste the gg-debug.txt file in it.\n"
		exit 1
	fi
}
get_currentBranchType(){
	get_currentBranch
	get_isTrialBranch
	if [ -z $isTrialBranch ]; then # not the trialBranch 
		if [ -n `echo $currentBranch | grep \/`]; then # have a "/" struct
			currentBranchTypeAll=`echo $currentBranch|sed 's#\(.*\)\/.*#\1#'`
			[ -n `echo $currentBranchTypeAll | grep master` ] && currentBranchType="master" && return
			[ -n `echo $currentBranchTypeAll | grep develop` ] && currentBranchType="develop" && return
			[ -n `echo $currentBranchTypeAll | grep feature` ] && currentBranchType="feature" && return
			[ -n `echo $currentBranchTypeAll | grep issues` ] && currentBranchType="issues" && return
			[ -n `echo $currentBranchTypeAll | grep work` ] && currentBranchType="work" && return
		else # do not have a "/" struct
			[ -n `echo $currentBranchTypeAll | grep release` ] && currentBranchType="release" && return
			[ -n `echo $currentBranchTypeAll | grep hotfix` ] && currentBranchType="hotfix" && return
			[ -n `echo $currentBranchTypeAll | grep master` ] && currentBranchType="master" && return
			[ -n `echo $currentBranchTypeAll | grep develop` ] && currentBranchType="develop" && return
			[ -n `echo $currentBranchTypeAll | grep basedOn` ] && currentBranchType="basedOn" && return
		fi
	else # it is a trialBranch
		currentBranchType="trial" && return
	fi
}

get_develop() {
		get_currentBranchType
	devCode=`echo $currentBranchTypeAll|sed 's#\(.*\)\%.*#\1#'`
	if [ -n $devCode ]; then
		develop="$devCode%develop"
	else
		develop="develop"
	fi
}

get_master() {
		get_currentBranchType
	devCode=`echo $currentBranchTypeAll|sed 's#\(.*\)\%.*#\1#'`
	if [ -n $devCode ]; then
		master="$devCode%master"
	else
		master="master"
	fi
}

get_feature() {
		get_develop
	if [ -z $devCode ]; then
		feature="feature"
	else
		feature="$devCode%feature"
	fi
}
get_issues() {
		get_develop
	if [ -z $devCode ]; then
		issues="issues"
	else
		issues="$devCode%issues"
	fi
}

get_version() {
		get_currentBranchType
	if [$currentBranchType != "release"] && [$currentBranchType != "hotfix"]; then
		printf "error use of this function: get_version!\n"
		exit 1
	fi
	#version=`echo $currentBranch | sed 's#.*-\(.*\)#\1#'`
	version=`echo $currentBranch|awk -F '-' '{print $2}'`
}

get_release() {
		get_develop
	if [ -z $devCode ]; then
		release="release"
	else
		release="$devCode%release"
	fi
}

get_basedOn(){
        get_master
    if [ -z $devCode ]; then
        basedOn="basedOn"
    else
        basedOn="$devCode%basedOn"
    fi  
}

get_work_basedOn(){
	work_basedOn=`echo $currentBranch|sed 's#\/\(.*\)-#\1#'`

}

get_hotfix() {
		get_master
	if [ -z $devCode ]; then
		hotfix="hotfix"
	else
		hotfix="$devCode%hotfix"
	fi
}

get_currentBranchParent(){
	#currentBranchParent=`echo $currentBranch|sed 's#\(.*\)\..*#\1#'`
	currentBranchParent=`echo $currentBranch|sed 's#\(.*\)\/.*#\1#'`
}

get_isTrialBranch(){
	isTrialBranch=`echo $currentBranch|sed 's#.*\/\(.*\)#\1#'|grep trial`
}

get_isParentAlive(){
	git branch  > temp.txt
	cat temp.txt | grep -x \ \ $currentBranchParent > temp1.txt
	isParentAlive=`cat temp1.txt`
	rm temp.txt temp1.txt
}

get_currentSHA() {
	currentSHA=`git show|grep ^commit|awk '{print $2}'`
}

get_currentTagName() {
	get_currentSHA
	git tag -l > .gg-data-temp1.txt
	git tag -l|awk '{system("git show "$1"|grep ^commit")}'|awk '{print $2}' > .gg-data-temp2.txt
	paste .gg-data-temp1.txt .gg-data-temp2.txt > .gg-data-temp3.txt
	currentTagName=`cat .gg-data-temp3.txt|grep $currentSHA|head -n 1|awk '{print $1}'`
	rm .gg-data-temp*
}

get_currentTagVersion() {
	if [ -z $currentTagName ]; then
		get_currentTagName
	fi
	currentTagVersion=`echo $currentTagName|sed 's#inUse-\(.*\)#\1#'`
}

get_now() {
	now=`date "+%Y-%m-%d-%H-%M-%S"`
}

testClear() {
	isClear=`git status|grep Changes\ not\ staged``git status|grep Changes\ to\ be\ committed`
	if [ -n $isClear ]; then
		git status
		printf "we suggest you make a commit before you do the next thing(Ctrl+C to abort the scripts)\nor you just want to go on do it?(Press enter twice for sure)"
		read temp
		read temp
	fi
}
